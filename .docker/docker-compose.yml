version: '3.5'

services:
# -- NGINX
  nginx:
    container_name: nginx_proxy
    image: nginx:stable-alpine
    ports:
        - '80:80'
    environment:
      BACKEND_URL: http://backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
# -- Frontend
  frontend:
    container_name: frontend_app
    image: raedchammam/demo-project-frontend
    # uncomment to build image
    # build:
    #   context: ../frontend
    #   dockerfile: Dockerfile
    ports:
        - '8080:8080'
    restart: unless-stopped
# -- Backend API
  backend:
    container_name: backend_api
    image: raedchammam/demo-project-backend
    # uncomment to build image
    # build:
    #   context: ../backend
    #   dockerfile: Dockerfile
    environment:
      NODE_ENV: prod
      PORT: 3000
      LOCAL_DOCKER: "false"
      LOG_LEVEL: debug
      PG_HOST: postgres_db
      PG_PORT: 5432
      PG_USERNAME: postgres
      PG_PASSWORD: changeme
      REDIS_HOST: redis_cache
      REDIS_PORT: 6379
      KAFKA_HOST: kafka
      KAFKA_PORT: 29092
    ports:
        - '3000:3000'
    links:
      - postgres_db
      - redis_cache
    depends_on:
      - postgres_db
      - redis_cache
      - kafka
    restart: unless-stopped
# -- Backend Realtime API
  backend-realtime:
    container_name: backend-realtime_api
    image: raedchammam/demo-project-backend-realtime
    # uncomment to build image
    # build:
    #   context: ../backend-realtime
    #   dockerfile: Dockerfile
    environment:
      NODE_ENV: prod
      PORT: 3001
      KAFKA_HOST: kafka
      KAFKA_PORT: 29092
    ports:
        - '3001:3001'
    depends_on:
      - kafka
    restart: unless-stopped
# -- Database
  postgres_db:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
      PGDATA: /data/postgres
    volumes:
      - postgres_data:/data/postgres
    ports:
      - '5432:5432'
    restart: unless-stopped
# -- Redis cache
  redis_cache:
    container_name: redis_cache
    image: redis:6-alpine
     # comment it out for logging
    logging:
      driver: none
    ports:
      - '6379:6379'
# -- Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:5.4.3
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: '2181'
      ZOOKEEPER_TICK_TIME: '2000'
# -- Kafka
  kafka:
    image: confluentinc/cp-kafka:5.4.2
    hostname: kafka
    container_name: kafka
    labels:
      - 'custom.service=kafka'
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: '0'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: '0'
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: 'true'
      KAFKA_LOG4J_LOGGERS: 'kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO'
      CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
# -- Prometheus
  prometheus:
    image: prom/prometheus:v2.23.0
    container_name: prometheus
    ports:
    - 9090:9090
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --web.enable-lifecycle
    volumes:
    - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
# -- Grafana
  grafana:
    image: grafana/grafana:7.3.4
    container_name: grafana
    links:
      - prometheus:prometheus
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - 3003:3000
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ORG_ROLE=Admin
      - GF_SMTP_ENABLED=false
    restart: unless-stopped
volumes:
  postgres_data:
  grafana_data:
